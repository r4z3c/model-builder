= Model Builder

Build active record models on the fly.

Handy when following TDD to develop a reusable component, that isn't strictly related to a project business intelligence (therefore should not reference it).

== Scenario

Take a look at this case of code duplication:

    class User < ActiveRecord::Base
      def map_all_names
        to_a.map &:name
      end
    end

    class Topic < ActiveRecord::Base
      def map_all_names
        to_a.map &:name
      end
    end

That can be easily improved through an abstraction:

    class User < ActiveRecord::Base
      include NameUtils
    end

    class Topic < ActiveRecord::Base
      include NameUtils
    end

    module NameUtils extend ActiveSupport::Concern
      included do
        define_singleton_method :map_all_names do
          all.map &:name
        end
      end
    end

Nice. Now we've a reusable abstraction, that could even fit into a gem to be applied at another projects.

But thinking about a gem context, we will not be able to use User or Topic models at our tests.
They belong to our business intelligence. So, how to test it?

Here is the need of don't rely our business intelligence during abstraction tests.

== Solution

    ModelBuilder.build 'MappableName', {
      includes: NameUtils,
      attributes: { name: :string },
      validates: [:name, presence: true]
    }

Now your 'MappableName' model is able to receive NameUtils tests:

    MappableName.map_all_names

See full test examples here[https://github.com/r4z3c/model-builder/blob/master/spec/examples/name_utils_spec.rb] and here[https://github.com/r4z3c/model-builder/blob/master/spec/lib/model_builder_spec.rb].

== Changelog

=== 2.1.0

- Improving support to namespaced classes/models. Now the builder accepts:

    ModelBuilder.build 'Namespaced::Models' ...