= Model Builder

Build active record models on the fly.

Handy when using TDD to develop a reusable component, that is not strictly related to the business intelligence of a project (and should not reference it).

== Scenario

Consider this case of duplicated code:

    class User < ActiveRecord::Base
        def map_all_names
            to_a.map &:name
        end
    end

    class Topic < ActiveRecord::Base
        def map_all_names
            to_a.map &:name
        end
    end

We can easily improve this through an abstraction:

    class User < ActiveRecord::Base
        include NameUtils
    end

    class Topic < ActiveRecord::Base
        include NameUtils
    end

    module NameUtils
        def map_all_names
            to_a.map &:name
        end
    end

Nice. Now we have a reusable abstraction, that could even fit in a gem to be applied at another projects.

But thinking about the gem context, we will not count on user or topic models.
They belong to our business intelligence. So, how to test it?

Here comes the necessity of don't rely on our business intelligence at abstractions tests.

== Solution
